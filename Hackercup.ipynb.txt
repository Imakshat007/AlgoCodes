{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "# Scale AI: Minimum ladder height problem\n",
        "# Reads input from \"input.txt\" and writes output to \"output.txt\"\n",
        "# Format:\n",
        "#   Input:\n",
        "#       T                       -> number of test cases\n",
        "#       For each test case:\n",
        "#           N                   -> number of platforms\n",
        "#           A1 A2 ... AN        -> heights of platforms\n",
        "#   Output:\n",
        "#       Case #1: <min ladder height>\n",
        "#       Case #2: <min ladder height>\n",
        "#       ...\n",
        "\n",
        "def main():\n",
        "    input_file = \"/content/snake_scales_chapter_1_input.txt\"\n",
        "    output_file = \"output.txt\"\n",
        "\n",
        "    with open(input_file, \"r\") as fin:\n",
        "        data = fin.read().strip().split()\n",
        "\n",
        "    if not data:\n",
        "        return\n",
        "\n",
        "    ptr = 0\n",
        "    test_cases = int(data[ptr])\n",
        "    ptr += 1\n",
        "\n",
        "    results = []\n",
        "\n",
        "    for case_num in range(1, test_cases + 1):\n",
        "        num_platforms = int(data[ptr])\n",
        "        ptr += 1\n",
        "\n",
        "        heights = list(map(int, data[ptr:ptr + num_platforms]))\n",
        "        ptr += num_platforms\n",
        "\n",
        "        # Handle single-platform case\n",
        "        if num_platforms <= 1:\n",
        "            min_ladder = 0\n",
        "        else:\n",
        "            min_ladder = max(abs(heights[i] - heights[i + 1]) for i in range(num_platforms - 1))\n",
        "\n",
        "        results.append(f\"Case #{case_num}: {min_ladder}\")\n",
        "\n",
        "    # Write formatted results to output.txt\n",
        "    with open(output_file, \"w\") as fout:\n",
        "        fout.write(\"\\n\".join(results))\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ],
      "metadata": {
        "id": "aYiXIClv3D7D"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Scale AI - Chapter 2: Platforms with Ground Access\n",
        "# Reads input from \"input.txt\" and writes output to \"output.txt\"\n",
        "# Output format: Case #i: <answer>\n",
        "\n",
        "class DSU:\n",
        "    def __init__(self, n):\n",
        "        self.parent = list(range(n))\n",
        "        self.rank = [0] * n\n",
        "\n",
        "    def find(self, x):\n",
        "        if self.parent[x] != x:\n",
        "            self.parent[x] = self.find(self.parent[x])\n",
        "        return self.parent[x]\n",
        "\n",
        "    def union(self, x, y):\n",
        "        rx, ry = self.find(x), self.find(y)\n",
        "        if rx == ry:\n",
        "            return False\n",
        "        if self.rank[rx] < self.rank[ry]:\n",
        "            self.parent[rx] = ry\n",
        "        elif self.rank[rx] > self.rank[ry]:\n",
        "            self.parent[ry] = rx\n",
        "        else:\n",
        "            self.parent[ry] = rx\n",
        "            self.rank[rx] += 1\n",
        "        return True\n",
        "\n",
        "\n",
        "def solve_case(n, heights):\n",
        "    edges = []\n",
        "\n",
        "    # Ground node = 0, platforms = 1..N\n",
        "    # Edge: ground <-> each platform\n",
        "    for i in range(1, n + 1):\n",
        "        edges.append((heights[i - 1], 0, i))\n",
        "\n",
        "    # Edge: between adjacent platforms\n",
        "    for i in range(1, n):\n",
        "        diff = abs(heights[i] - heights[i - 1])\n",
        "        edges.append((diff, i, i + 1))\n",
        "\n",
        "    # Sort by weight\n",
        "    edges.sort(key=lambda x: x[0])\n",
        "\n",
        "    dsu = DSU(n + 1)\n",
        "    max_edge_in_mst = 0\n",
        "    count = 0\n",
        "\n",
        "    for w, u, v in edges:\n",
        "        if dsu.union(u, v):\n",
        "            max_edge_in_mst = max(max_edge_in_mst, w)\n",
        "            count += 1\n",
        "            if count == n:  # MST complete (n edges to connect n+1 nodes)\n",
        "                break\n",
        "\n",
        "    return max_edge_in_mst\n",
        "\n",
        "\n",
        "def main():\n",
        "    input_file = \"/content/snake_scales_chapter_2_input.txt\"\n",
        "    output_file = \"output1.txt\"\n",
        "\n",
        "    with open(input_file, \"r\") as fin:\n",
        "        data = fin.read().strip().split()\n",
        "\n",
        "    if not data:\n",
        "        return\n",
        "\n",
        "    ptr = 0\n",
        "    t = int(data[ptr])\n",
        "    ptr += 1\n",
        "    results = []\n",
        "\n",
        "    for case_num in range(1, t + 1):\n",
        "        n = int(data[ptr])\n",
        "        ptr += 1\n",
        "        heights = list(map(int, data[ptr:ptr + n]))\n",
        "        ptr += n\n",
        "        answer = solve_case(n, heights)\n",
        "        results.append(f\"Case #{case_num}: {answer}\")\n",
        "\n",
        "    with open(output_file, \"w\") as fout:\n",
        "        fout.write(\"\\n\".join(results))\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ],
      "metadata": {
        "id": "tByD1yqWgGNc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Scale AI - Chapter 2: Platforms with Ground Access\n",
        "# Reads input from \"input.txt\" and writes output to \"output.txt\"\n",
        "# Output format: Case #i: <answer>\n",
        "\n",
        "class DSU:\n",
        "    def __init__(self, n):\n",
        "        self.parent = list(range(n))\n",
        "        self.rank = [0] * n\n",
        "\n",
        "    def find(self, x):\n",
        "        if self.parent[x] != x:\n",
        "            self.parent[x] = self.find(self.parent[x])\n",
        "        return self.parent[x]\n",
        "\n",
        "    def union(self, x, y):\n",
        "        rx, ry = self.find(x), self.find(y)\n",
        "        if rx == ry:\n",
        "            return False\n",
        "        if self.rank[rx] < self.rank[ry]:\n",
        "            self.parent[rx] = ry\n",
        "        elif self.rank[rx] > self.rank[ry]:\n",
        "            self.parent[ry] = rx\n",
        "        else:\n",
        "            self.parent[ry] = rx\n",
        "            self.rank[rx] += 1\n",
        "        return True\n",
        "\n",
        "\n",
        "def solve_case(num_platforms, heights):\n",
        "    edges = []\n",
        "    total_nodes = num_platforms + 1  # ground (0) + N platforms\n",
        "\n",
        "    # Connect ground (0) to each platform (1..N)\n",
        "    for i in range(num_platforms):\n",
        "        edges.append((heights[i], 0, i + 1))\n",
        "\n",
        "    # Connect adjacent platforms (i, i+1)\n",
        "    for i in range(num_platforms - 1):\n",
        "        diff = abs(heights[i] - heights[i + 1])\n",
        "        edges.append((diff, i + 1, i + 2))\n",
        "\n",
        "    # Sort by ladder height (weight)\n",
        "    edges.sort(key=lambda x: x[0])\n",
        "\n",
        "    dsu = DSU(total_nodes)\n",
        "    max_edge_in_mst = 0\n",
        "    used_edges = 0\n",
        "\n",
        "    # Kruskal's MST\n",
        "    for w, u, v in edges:\n",
        "        if dsu.union(u, v):\n",
        "            max_edge_in_mst = max(max_edge_in_mst, w)\n",
        "            used_edges += 1\n",
        "            if used_edges == num_platforms:  # MST complete\n",
        "                break\n",
        "\n",
        "    return max_edge_in_mst\n",
        "\n",
        "\n",
        "def main():\n",
        "    input_file = \"/content/snake_scales_chapter_2_input.txt\"\n",
        "    output_file = \"output.txt\"\n",
        "\n",
        "    with open(input_file, \"r\") as fin:\n",
        "        lines = [line.strip() for line in fin if line.strip()]\n",
        "\n",
        "    t = int(lines[0])\n",
        "    line_idx = 1\n",
        "    results = []\n",
        "\n",
        "    for case_num in range(1, t + 1):\n",
        "        n = int(lines[line_idx])\n",
        "        line_idx += 1\n",
        "        heights = list(map(int, lines[line_idx].split()))\n",
        "        line_idx += 1\n",
        "\n",
        "        if len(heights) != n:\n",
        "            raise ValueError(f\"Test case #{case_num}: expected {n} heights, got {len(heights)}\")\n",
        "\n",
        "        ans = solve_case(n, heights)\n",
        "        results.append(f\"Case #{case_num}: {ans}\")\n",
        "\n",
        "    with open(output_file, \"w\") as fout:\n",
        "        fout.write(\"\\n\".join(results))\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ],
      "metadata": {
        "id": "z4vP2ZcHfE09"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Meta Coolness - Chapter 3\n",
        "# Reads input from \"input.txt\" and writes output to \"output.txt\"\n",
        "# Output format: Case #i: followed by 2*N integers (multipliers)\n",
        "\n",
        "def find_largest_divisor_leq(b, a):\n",
        "    best = 1\n",
        "    i = 1\n",
        "    while i * i <= b:\n",
        "        if b % i == 0:\n",
        "            if i <= a:\n",
        "                best = max(best, i)\n",
        "            if b // i <= a:\n",
        "                best = max(best, b // i)\n",
        "        i += 1\n",
        "    return best\n",
        "\n",
        "\n",
        "def solve_case(n, a, b):\n",
        "    x = find_largest_divisor_leq(b, a)\n",
        "\n",
        "    phase1 = [1] * (n - 1) + [x]  # multiply by x on last day of first half\n",
        "    phase2 = [1] * (n - 1) + [b // x]  # multiply by (b/x) on last day\n",
        "    return phase1 + phase2\n",
        "\n",
        "\n",
        "def main():\n",
        "    input_file = \"/content/final_product_chapter_1_input.txt\"\n",
        "    output_file = \"/content/final_product_chapter_1_output.txt\"\n",
        "\n",
        "    with open(input_file, \"r\") as fin:\n",
        "        t = int(fin.readline().strip())\n",
        "        results = []\n",
        "        for case_num in range(1, t + 1):\n",
        "            n, a, b = map(int, fin.readline().split())\n",
        "            seq = solve_case(n, a, b)\n",
        "            seq_str = \" \".join(map(str, seq))\n",
        "            results.append(f\"Case #{case_num}: {seq_str}\")\n",
        "\n",
        "    with open(output_file, \"w\") as fout:\n",
        "        fout.write(\"\\n\".join(results))\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ],
      "metadata": {
        "id": "rzaC6-3nhEax"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "MOD = 10**9 + 7\n",
        "\n",
        "# ---------- Dynamic factorial cache ----------\n",
        "fact = [1, 1]\n",
        "invfact = [1, 1]\n",
        "\n",
        "def ensure_fact(n):\n",
        "    \"\"\"Ensure factorials and inverses are computed up to n.\"\"\"\n",
        "    cur = len(fact)\n",
        "    if cur <= n:\n",
        "        for i in range(cur, n + 1):\n",
        "            fact.append(fact[-1] * i % MOD)\n",
        "        invfact.extend([1] * (n + 1 - cur))\n",
        "        invfact[n] = pow(fact[n], MOD - 2, MOD)\n",
        "        for i in range(n - 1, cur - 1, -1):\n",
        "            invfact[i] = invfact[i + 1] * (i + 1) % MOD\n",
        "\n",
        "def comb(n, k):\n",
        "    if k < 0 or k > n:\n",
        "        return 0\n",
        "    ensure_fact(n)\n",
        "    return fact[n] * invfact[k] % MOD * invfact[n - k] % MOD\n",
        "\n",
        "# ---------- Core Logic ----------\n",
        "def factors(x):\n",
        "    r = []\n",
        "    d = 2\n",
        "    while d * d <= x:\n",
        "        if x % d == 0:\n",
        "            c = 0\n",
        "            while x % d == 0:\n",
        "                x //= d\n",
        "                c += 1\n",
        "            r.append((d, c))\n",
        "        d += 1 if d == 2 else 2\n",
        "    if x > 1:\n",
        "        r.append((x, 1))\n",
        "    return r\n",
        "\n",
        "def solve(N, A, B):\n",
        "    P = factors(B)\n",
        "    if not P:\n",
        "        return 0\n",
        "\n",
        "    vals = []\n",
        "    for p, e in P:\n",
        "        arr = []\n",
        "        for k in range(e + 1):\n",
        "            x = comb(k + N - 1, N - 1)\n",
        "            y = comb((e - k) + N - 1, N - 1)\n",
        "            arr.append((x, y))\n",
        "        vals.append(arr)\n",
        "\n",
        "    # Precompute powers to avoid repeated pow(p, k)\n",
        "    powers = [[1] * (e + 1) for p, e in P]\n",
        "    for i, (p, e) in enumerate(P):\n",
        "        for k in range(1, e + 1):\n",
        "            powers[i][k] = powers[i][k - 1] * p\n",
        "            if powers[i][k] > A:\n",
        "                powers[i][k] = A + 1\n",
        "                break\n",
        "\n",
        "    ans = 0\n",
        "    stack = [(0, 1, 1)]  # (index, value, product)\n",
        "    while stack:\n",
        "        i, val, prod = stack.pop()\n",
        "        if val > A:\n",
        "            continue\n",
        "        if i == len(P):\n",
        "            ans = (ans + prod) % MOD\n",
        "            continue\n",
        "        p, e = P[i]\n",
        "        arr = vals[i]\n",
        "        powp = powers[i]\n",
        "        for k in range(e + 1):\n",
        "            nxt = val * powp[k]\n",
        "            if nxt > A:\n",
        "                break\n",
        "            x, y = arr[k]\n",
        "            new_prod = prod * x % MOD * y % MOD\n",
        "            stack.append((i + 1, nxt, new_prod))\n",
        "\n",
        "    return ans % MOD\n",
        "\n",
        "# ---------- Main ----------\n",
        "def main():\n",
        "    with open(\"/content/final_product_chapter_2_validation_input.txt\", \"r\") as fin:\n",
        "        t = int(fin.readline().strip())\n",
        "        tests = [tuple(map(int, fin.readline().split())) for _ in range(t)]\n",
        "\n",
        "    results = []\n",
        "    for i, (N, A, B) in enumerate(tests, 1):\n",
        "        res = solve(N, A, B)\n",
        "        results.append(f\"Case #{i}: {res}\")\n",
        "\n",
        "    with open(\"/content/final_product_chapter_2_validation_output.txt\", \"w\") as fout:\n",
        "        fout.write(\"\\n\".join(results))\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ],
      "metadata": {
        "id": "sRoNn96iiz_F"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from functools import lru_cache\n",
        "\n",
        "MOD = 10**9 + 7\n",
        "\n",
        "# ---------- Safe Combination (No factorial precompute) ----------\n",
        "@lru_cache(maxsize=None)\n",
        "def comb(n, k):\n",
        "    if k < 0 or k > n:\n",
        "        return 0\n",
        "    if k == 0 or k == n:\n",
        "        return 1\n",
        "    k = min(k, n - k)\n",
        "    res = 1\n",
        "    for i in range(1, k + 1):\n",
        "        res = res * (n - i + 1) % MOD\n",
        "        res = res * pow(i, MOD - 2, MOD) % MOD\n",
        "    return res\n",
        "\n",
        "# ---------- Prime Factorization ----------\n",
        "def factors(x):\n",
        "    r = []\n",
        "    d = 2\n",
        "    while d * d <= x:\n",
        "        if x % d == 0:\n",
        "            c = 0\n",
        "            while x % d == 0:\n",
        "                x //= d\n",
        "                c += 1\n",
        "            r.append((d, c))\n",
        "        d += 1 if d == 2 else 2\n",
        "    if x > 1:\n",
        "        r.append((x, 1))\n",
        "    return r\n",
        "\n",
        "# ---------- Main Solve ----------\n",
        "def solve(N, A, B):\n",
        "    P = factors(B)\n",
        "    if not P:\n",
        "        return 0\n",
        "\n",
        "    vals = []\n",
        "    for p, e in P:\n",
        "        arr = []\n",
        "        for k in range(e + 1):\n",
        "            x = comb(k + N - 1, N - 1)\n",
        "            y = comb((e - k) + N - 1, N - 1)\n",
        "            arr.append((x, y))\n",
        "        vals.append(arr)\n",
        "\n",
        "    # Precompute powers only up to necessary limit\n",
        "    powers = []\n",
        "    for p, e in P:\n",
        "        pw = [1]\n",
        "        v = 1\n",
        "        for _ in range(e):\n",
        "            v *= p\n",
        "            if v > A:\n",
        "                break\n",
        "            pw.append(v)\n",
        "        powers.append(pw)\n",
        "\n",
        "    ans = 0\n",
        "    stack = [(0, 1, 1)]  # (index, val, prod)\n",
        "    while stack:\n",
        "        i, val, prod = stack.pop()\n",
        "        if val > A:\n",
        "            continue\n",
        "        if i == len(P):\n",
        "            ans = (ans + prod) % MOD\n",
        "            continue\n",
        "\n",
        "        p, e = P[i]\n",
        "        arr = vals[i]\n",
        "        pw = powers[i]\n",
        "        max_k = min(e, len(pw) - 1)\n",
        "        for k in range(max_k + 1):\n",
        "            nxt = val * pw[k]\n",
        "            if nxt > A:\n",
        "                break\n",
        "            x, y = arr[k]\n",
        "            new_prod = prod * x % MOD * y % MOD\n",
        "            stack.append((i + 1, nxt, new_prod))\n",
        "\n",
        "    return ans % MOD\n",
        "\n",
        "# ---------- I/O ----------\n",
        "def main():\n",
        "    with open(\"/content/final_product_chapter_2_input.txt\", \"r\") as fin:\n",
        "        t = int(fin.readline().strip())\n",
        "        tests = [tuple(map(int, fin.readline().split())) for _ in range(t)]\n",
        "\n",
        "    results = []\n",
        "    for i, (N, A, B) in enumerate(tests, 1):\n",
        "        res = solve(N, A, B)\n",
        "        results.append(f\"Case #{i}: {res}\")\n",
        "\n",
        "    with open(\"/content/final_product_chapter_2_output.txt\", \"w\") as fout:\n",
        "        fout.write(\"\\n\".join(results))\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ],
      "metadata": {
        "id": "gVa0KtRBkuAM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def main():\n",
        "    import sys\n",
        "    sys.setrecursionlimit(1 << 25)\n",
        "\n",
        "    with open(\"/content/narrowing_down_validation_input.txt\", \"r\") as fin:\n",
        "        T = int(fin.readline())\n",
        "        results = []\n",
        "\n",
        "        for case_num in range(1, T + 1):\n",
        "            N = int(fin.readline())\n",
        "            A = list(map(int, fin.readline().split()))\n",
        "\n",
        "            total_cost = 0\n",
        "            last_nonzero = -1  # last index where H[i] != 0\n",
        "\n",
        "            for i in range(N):\n",
        "                if A[i] != 0:\n",
        "                    last_nonzero = i\n",
        "                # Each subarray ending at i that contains at least one non-zero\n",
        "                # has minimal cost = length of subarray if length>=2, else 1\n",
        "                # Number of subarrays ending at i that contain last_nonzero = last_nonzero +1\n",
        "                if last_nonzero != -1:\n",
        "                    total_cost += last_nonzero + 1\n",
        "\n",
        "            results.append(f\"Case #{case_num}: {total_cost}\")\n",
        "\n",
        "    with open(\"/content/narrowing_down_validation_output.txt\", \"w\") as fout:\n",
        "        fout.write(\"\\n\".join(results))\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ],
      "metadata": {
        "id": "UfTpnYIPm8tz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Feather Flattening Problem – File I/O Version\n",
        "# Compatible with Python 3.10+\n",
        "\n",
        "def solve_case(arr):\n",
        "    n = len(arr)\n",
        "    prefix = [0] * (n + 1)\n",
        "    ans = 0\n",
        "    seen = {0: 1}\n",
        "    last_invalid = 0\n",
        "    xorval = 0\n",
        "\n",
        "    for i in range(1, n + 1):\n",
        "        xorval ^= arr[i - 1]\n",
        "        if xorval in seen:\n",
        "            last_invalid = max(last_invalid, seen[xorval])\n",
        "        ans += i - last_invalid\n",
        "        seen[xorval] = i + 1\n",
        "    return n * (n + 1) // 2 - ans\n",
        "\n",
        "def main(input_file, output_file):\n",
        "    with open(input_file, 'r') as infile, open(output_file, 'w') as outfile:\n",
        "        T = int(infile.readline().strip())\n",
        "        for t in range(1, T + 1):\n",
        "            n = int(infile.readline().strip())\n",
        "            A = list(map(int, infile.readline().strip().split()))\n",
        "            result = solve_case(A)\n",
        "            outfile.write(f\"Case #{t}: {result}\\n\")\n",
        "\n",
        "# Example usage:\n",
        "# main('input.txt', 'output.txt')\n",
        "main(\"/content/narrowing_down_validation_input.txt\",'/content/narrowing_down_validation_output.txt')"
      ],
      "metadata": {
        "id": "PnOYMZpRoijE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def solve_case(S: str) -> str:\n",
        "    # Trim leading B's and trailing A's (these are never eaten)\n",
        "    i = 0\n",
        "    while i < len(S) and S[i] == 'B':\n",
        "        i += 1\n",
        "    j = len(S) - 1\n",
        "    while j >= 0 and S[j] == 'A':\n",
        "        j -= 1\n",
        "\n",
        "    # If string becomes empty after trimming\n",
        "    if i > j:\n",
        "        return \"Alice\" if 'A' in S else \"Bob\"\n",
        "\n",
        "    # Count remaining A and B\n",
        "    cntA = cntB = 0\n",
        "    for ch in S[i:j + 1]:\n",
        "        if ch == 'A':\n",
        "            cntA += 1\n",
        "        else:\n",
        "            cntB += 1\n",
        "\n",
        "    return \"Alice\" if cntA >= cntB else \"Bob\"\n",
        "\n",
        "\n",
        "def main():\n",
        "    # Input/output file paths (adjust as needed)\n",
        "    input_file = \"input.txt\"\n",
        "    output_file = \"output.txt\"\n",
        "\n",
        "    with open(input_file, \"r\") as fin, open(output_file, \"w\") as fout:\n",
        "        T = int(fin.readline().strip())\n",
        "\n",
        "        for t in range(1, T + 1):\n",
        "            fin.readline()  # Skip N (we don't need it)\n",
        "            S = fin.readline().strip()\n",
        "            winner = solve_case(S)\n",
        "            fout.write(f\"Case #{t}: {winner}\\n\")\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ],
      "metadata": {
        "id": "CffHDQcGvAdk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def main():\n",
        "    import sys\n",
        "    sys.setrecursionlimit(1 << 25)\n",
        "\n",
        "    with open(\"/content/narrowing_down_validation_input.txt\", \"r\") as fin:\n",
        "        T = int(fin.readline())\n",
        "        results = []\n",
        "\n",
        "        for case_num in range(1, T + 1):\n",
        "            N = int(fin.readline())\n",
        "            A = list(map(int, fin.readline().split()))\n",
        "\n",
        "            total_cost = 0\n",
        "            last_nonzero = -1  # last index where H[i] != 0\n",
        "\n",
        "            for i in range(N):\n",
        "                if A[i] != 0:\n",
        "                    last_nonzero = i\n",
        "                # Each subarray ending at i that contains at least one non-zero\n",
        "                # has minimal cost = 1 if length=1, or more for larger, cumulative counted by last_nonzero\n",
        "                if last_nonzero != -1:\n",
        "                    total_cost += last_nonzero + 1\n",
        "\n",
        "            results.append(f\"Case #{case_num}: {total_cost}\")\n",
        "\n",
        "    with open(\"/content/narrowing_down_validation_output.txt\", \"w\") as fout:\n",
        "        fout.write(\"\\n\".join(results))\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ],
      "metadata": {
        "id": "926WO4uevyyr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "vX-lWp1B1mK_"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}